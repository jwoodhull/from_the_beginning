// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Pervasives = require("bs-platform/lib/js/pervasives.js");

function inner_length(_n, _l) {
  while(true) {
    var l = _l;
    var n = _n;
    if (l) {
      _l = l[1];
      _n = n + 1 | 0;
      continue ;
      
    } else {
      return n;
    }
  };
}

function length(param) {
  return inner_length(0, param);
}

function sum(l) {
  if (l) {
    return l[0] + sum(l[1]) | 0;
  } else {
    return 0;
  }
}

function odds(l) {
  if (l) {
    var match = l[1];
    if (match) {
      return /* :: */[
              l[0],
              odds(match[1])
            ];
    } else {
      return l;
    }
  } else {
    return l;
  }
}

function append(a, b) {
  if (a) {
    return /* :: */[
            a[0],
            append(a[1], b)
          ];
  } else {
    return b;
  }
}

function rev(l) {
  if (l) {
    return Pervasives.$at(rev(l[1]), /* :: */[
                l[0],
                /* [] */0
              ]);
  } else {
    return /* [] */0;
  }
}

function take(n, l) {
  if (l && n > 0) {
    return /* :: */[
            l[0],
            take(n - 1 | 0, l[1])
          ];
  } else {
    return /* [] */0;
  }
}

function drop(_n, _l) {
  while(true) {
    var l = _l;
    var n = _n;
    if (l && n > 0) {
      _l = l[1];
      _n = n - 1 | 0;
      continue ;
      
    } else {
      return l;
    }
  };
}

function count_true(_l) {
  while(true) {
    var l = _l;
    if (l) {
      var t = l[1];
      if (l[0]) {
        return 1 + count_true(t) | 0;
      } else {
        _l = t;
        continue ;
        
      }
    } else {
      return 0;
    }
  };
}

function drop_last(l) {
  if (l) {
    var t = l[1];
    if (t) {
      return /* :: */[
              l[0],
              drop_last(t)
            ];
    } else {
      return /* [] */0;
    }
  } else {
    return /* [] */0;
  }
}

function member(m, _l) {
  while(true) {
    var l = _l;
    if (l) {
      if (m === l[0]) {
        return /* true */1;
      } else {
        _l = l[1];
        continue ;
        
      }
    } else {
      return /* false */0;
    }
  };
}

function makeSet(_l) {
  while(true) {
    var l = _l;
    if (l) {
      var t = l[1];
      var h = l[0];
      if (member(h, t)) {
        _l = t;
        continue ;
        
      } else {
        return /* :: */[
                h,
                makeSet(t)
              ];
      }
    } else {
      return /* [] */0;
    }
  };
}

exports.inner_length = inner_length;
exports.length = length;
exports.sum = sum;
exports.odds = odds;
exports.append = append;
exports.rev = rev;
exports.take = take;
exports.drop = drop;
exports.count_true = count_true;
exports.drop_last = drop_last;
exports.member = member;
exports.makeSet = makeSet;
/* No side effect */
